// const Fs = require('fs');
// const Pdf = require('./lib/pdf-parse.js');

// module.exports = Pdf;

// let isDebugMode = !module.parent; 

// //process.env.AUTO_KENT_DEBUG


// //for testing purpose
// if (isDebugMode) {

//     //let PDF_FILE = './test/data/05-versions-space.pdf';
//     let dataBuffer = Fs.readFileSync(PDF_FILE);
//     Pdf(dataBuffer).then(function(data) {
//         Fs.writeFileSync(`${PDF_FILE}.txt`, data.text, {
//             encoding: 'utf8',
//             flag: 'w'
//         });
//         debugger;
//     }).catch(function(err) {
//         debugger;
//     });

// }
// pdf-parse/index.js
const fs = require('fs');
const pdfjsLib = require('pdfjs-dist/legacy/build/pdf.js');

/**
 * Parses a PDF buffer and returns text content.
 * @param {Buffer} dataBuffer - PDF file buffer
 * @returns {Promise<{text: string}>} - Object with text extracted from PDF
 */
function parsePDF(dataBuffer) {
  return pdfjsLib.getDocument({ data: dataBuffer }).promise.then(async (pdfDoc) => {
    let fullText = '';

    for (let i = 1; i <= pdfDoc.numPages; i++) {
      const page = await pdfDoc.getPage(i);
      const content = await page.getTextContent();
      const pageText = content.items.map(item => item.str).join(' ');
      fullText += pageText + '\n\n';
    }

    return { text: fullText };
  });
}

module.exports = parsePDF;
